704. Binary search Implementation

def BST(list, val):

start=0
end= len(list)-1
while start<=end:
  mid = (start+end)//2
  if list[mid]==val:
    return mid;
  elif list[mid]>val:
   end=mid-1
   else:
   start=mid+1
  return -1
  
  
  
  
  
  2. 441 You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.

Example 1:

n = 5

The coins can form the following rows:
¤
¤ ¤
¤ ¤

Because the 3rd row is incomplete, we return 2.

Solution:

def arrangecoins(n):
  suma=0
  for i in range(n+1):
    suma = suma+(i+1)
    if suma>n:
      print(i)
      return i
    
    
    
    
3. 852. Peak Index in a Mountain Array
Easy

290

678

Favorite

Share
Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].



Example 1:

Input: [0,1,0]
Output: 1
  
      
  class Solution(object):
    def peakIndexInMountainArray(self, A):
        lo, hi = 0, len(A) - 1
        while lo < hi:
            mi = (lo + hi) / 2
            if A[mi] < A[mi + 1]:
                lo = mi + 1
            else:
                hi = mi
        return lo
