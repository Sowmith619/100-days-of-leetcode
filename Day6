//Longest Increasing subsequence
//return the length of the longest increasing subsequence
//We use dynamic programming to solve the problem.
//Returns the length of the String.

class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int[] arr = new int[nums.length];
        
        int n = nums.length;
        
        if(nums.length==0)
            return 0;
        if(nums.length==1)
            return 1;
        System.out.println(nums.length);
        
        
        
        
        for(int i=0;i<nums.length;i++){
            arr[i]=1;
        }
        
        for(int i=1;i<nums.length;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j] && arr[i]<arr[j]+1)
                    arr[i] = arr[j]+1;
            }
        }
        
        System.out.println(Arrays.toString(arr));
        
        int max = -1243;
        for(int i=0;i<arr.length;i++)
        {
            //int max = -1243;
            if(arr[i]>max)
                max=arr[i];
        }
        return max;
        
    }
}

