151. Reverse Words in a String
Medium

628

2373

Favorite

Share
Given an input string, reverse the string word by word.

 

Example 1:

Input: "the sky is blue"
Output: "blue is sky the"
Example 2:

Input: "  hello world!  "
Output: "world! hello"
Explanation: Your reversed string should not contain leading or trailing spaces.
Example 3:

Input: "a good   example"
Output: "example good a"
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.

sol:

def reverseWords:
  return " ".join(reverse(s.split()))
  
  
  
  Spiral Matrix:
  Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

Example 1:

Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]

138. Copy List with Random Pointer
Medium

1769

470

Favorite

Share
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.

 

Example 1:



Input:
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

Explanation:
Node 1's value is 1, both of its next and random pointer points to Node 2.
Node 2's value is 2, its next pointer points to null and its random pointer points to itself.


solution:
"""
# Definition for a Node.
class Node:
    def __init__(self, val, next, random):
        self.val = val
        self.next = next
        self.random = random
"""
class Solution:
    
    def __init__(self):
        self.visitedHash={}
    def copyRandomList(self, head: 'Node') -> 'Node':
        
        if head==None:
            return None
        
        
        if head in self.visitedHash:
            return self.visitedHash[head]
        
        
        node = Node(head.val, None, None)
           
        self.visitedHash[head]=node
        
        node.next = self.copyRandomList(head.next)
        node.random  =self.copyRandomList(head.random)
    
        return node
        
        
165. Compare Version Numbers
Medium

326

1160

Favorite

Share
Compare two version numbers version1 and version2.
If version1 > version2 return 1; if version1 < version2 return -1;otherwise return 0.

You may assume that the version strings are non-empty and contain only digits and the . character.

The . character does not represent a decimal point and is used to separate number sequences.

For instance, 2.5 is not "two and a half" or "half way to version three", it is the fifth second-level revision of the second first-level revision.

You may assume the default revision number for each level of a version number to be 0. For example, version number 3.4 has a revision number of 3 and 4 for its first and second level revision number. Its third and fourth level revision number are both 0.

 

Example 1:

Input: version1 = "0.1", version2 = "1.1"
Output: -1

class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
    
        list1= [int(v) for v in version1.split('.')]
        list2 =[int(v) for v in version2.split('.')]
        for i in range(max(len(list1), len(list2))):
            v1 = list1[i] if i <len(list1) else 0
            print(v1)
            v2= list2[i] if i <len(list2) else 0
            print(v2)
            if v1>v2:
                return 1
            elif v2>v1:
                return -1
        return 0
 

  88. Merge Sorted Array
Easy

1243

2992

Favorite

Share
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

solution:
class Solution(object):
    def merge(self, nums1, m, nums2, n):
        """
        :type nums1: List[int]
        :type m: int
        :type nums2: List[int]
        :type n: int
        :rtype: void Do not return anything, modify nums1 in-place instead.
        """
        nums1[:] = sorted(nums1[:m] + nums2)
        
  88. Merge Sorted Array
Easy

1243

2992

Favorite

Share
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        nums1_copy=nums1[:m]
        print(nums1_copy)
        nums1[:]=[]
        p1=0
        p2=0
        while(p1 <m and p2<n):
            if nums1_copy[p1]<nums2[p2]:
                nums1.append(nums1_copy[p1])
                p1+=1
            else:
                nums1.append(nums2[p2])
                p2+=1
        if p1<m:
                nums1[p1+p2:]=nums1_copy[p1:]
        if p2<n:
                nums1[p1+p2:] = nums2[p2:]
   
