700. Search in a Binary Search Tree
Easy

318

92

Favorite

Share
Given the root node of a binary search tree (BST) and a value. You need to find the node in the BST that the node's value equals the given value. Return the subtree rooted with that node. If such node doesn't exist, you should return NULL.

For example, 

Given the tree:
        4
       / \
      2   7
     / \
    1   3

And the value to search: 2
You should return this subtree:

      2     
     / \   
    1   3


class Solution:
    def searchBST(self, root: TreeNode, val: int) -> TreeNode:
        current_node = root
        while(current_node!=None):
            if current_node.val==val:
                return current_node
            elif current_node.val<val:
                current_node = current_node.right
            elif current_node.val>val:
                current_node= current_node.left
            
            
            
  #DFS solution:
  class Solution:
    def searchBST(self, root, val):
        if root and val < root.val: return self.searchBST(root.left, val)
        elif root and val > root.val: return self.searchBST(root.right, val)
        return root
