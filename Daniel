2. Add Two Numbers
Medium

5759

1479

Favorite

Share
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


solution:
def __init__(self,value=0,next=None):
    self.value = value
    self.next = next

def linkedlistsum_iterative(list1, list2):
    res=Node()
    sum=0 
    carry=0
    p1=list1
    p2 = list2
    curr = res
    while(p1!=None or p2!=None or carry!=0):
        sum = carry
        if p1:
            sum+= p1.val
            p1 = p1.next
        if p2:
            sum+= p2.val
            p2 = p2.next
        
        cur.value = sum%10
        carry = sum//10
        
        if p1!=None or p2 is not None or carry!=0:
            curr.next = Node()
            cur = cur.next
        return res
    
    
def linkedlistsum_recursive(list1, list2, carry=0):
    if list1 is None and list2 is None and carry ==0:
        return None
    next1 =None
    next2=None
    sum =carry
    if list1:
        sum+=list1.value
        next1 = list1.next
    if list2:
        sum+=list2.value
        next2 = list2.next
    return Node(sum%10, linkedlistsum_recursive(next1, next2, sum//10)
    
    
 
 
 Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", with the length of 3. 
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
    
    
    
    
  #Brute force
def longest_substring( self,string):
    max_length =0
    for i in range(len(string)):
        max_length = max(max_length, helper(self,string[i]))
    
    
    def helper(string, start):
        seen = set()
        for i in range(start, len(string)):
            if string[i] not in seen:
                set.add(string[i])
            else:
                return i-start
        return len(string)-start
                 
    
    
longest_substring("abc")    

#Sliding window

def longest_substring(string):
    seen={}
    maximum_length=0
    start=0
    for end in range(len(string)):
        if string[end] in seen:
            start = max(start, seen[string[end]]+1)
        seen[string[end]] =end
        maximum_length = max(maximum_length, end-start+1)
    return maximum_length
