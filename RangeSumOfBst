938. Range Sum of BST
Easy

353

56

Favorite

Share
Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32

#The problem has two approaches iterative and recursive:


1# Recursive way of solving:

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        def dfs(node):
            if node:
                if L <=node.val <= R:
                    self.ans+=node.val
                if L<node.val:
                    dfs(node.left)
                if node.val < R:
                    dfs(node.right)
                
        self.ans=0
        dfs(root)
        return self.ans
        
        
        
Iterative way
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def rangeSumBST(self, root: TreeNode, L: int, R: int) -> int:
        ans=0
        stack=[root]
        while stack:
            node=stack.pop()
            if node:
                if L<= node.val <=R:
                    ans+=node.val
                if L<node.val:
                    stack.append(node.left)
                if node.val<R:
                    stack.append(node.right)
        return ans
