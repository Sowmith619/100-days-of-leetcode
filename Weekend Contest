387. First Unique Character in a String
Easy

1055

80

Favorite

Share
Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.


class Solution:
    def firstUniqChar(self, s: str) -> int:
        if len(s)==0:
            return -1
            
        d=collections.Counter(s)
        if (min(list(d.values()))>1):
            return -1
        else:
            return s.index(min(d, key=d.get))
            
            
            
    386. Lexicographical Numbers
Medium
Share
Given an integer n, return 1 - n in lexicographical order.

For example, given 13, return: [1,10,11,12,13,2,3,4,5,6,7,8,9].

Please optimize your algorithm to use less time and space. The input size may be as large as 5,000,000.


Solution:
class Solution:
    def lexicalOrder(self, n: int) -> List[int]:
        return ([int(i) for i in sorted([str(i) for i in range(1,n+1)])])
        
 


Given two strings s and t which consist of only lowercase letters.

String t is generated by random shuffling string s and then add one more letter at a random position.

Find the letter that was added in t.


Input:
s = "abcd"
t = "abcde"

Output:
e

Explanation:
'e' is the letter that was added.


class Solution:
    def findTheDifference(self, s: str, t: str) -> str:
        dic = {}
        for ch in s:
            dic[ch] = dic.get(ch, 0) + 1
        for ch in t:
            if dic.get(ch, 0) == 0:
                return ch
            else:
                dic[ch] -= 1
                
                
  
  
  
